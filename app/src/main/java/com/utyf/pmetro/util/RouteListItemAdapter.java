package com.utyf.pmetro.util;import android.content.Context;import android.graphics.Canvas;import android.graphics.ColorFilter;import android.graphics.Paint;import android.graphics.PixelFormat;import android.graphics.Rect;import android.graphics.drawable.Drawable;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.ArrayAdapter;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.TextView;import com.utyf.pmetro.R;import com.utyf.pmetro.map.Line;import com.utyf.pmetro.map.MapData;import com.utyf.pmetro.map.RouteInfo;import java.util.ArrayList;/** * Created by Fedor on 10.04.2016. * * Adapter for displaying a route in the list of alternative routes */public class RouteListItemAdapter extends ArrayAdapter<RouteInfo> {    private int resource;    private Context context;    private MapData mapData; // Required to get line colors    public RouteListItemAdapter(Context context, int resource, RouteInfo[] objects, MapData mapData) {        super(context, resource, objects);        this.context = context;        this.resource = resource;        this.mapData = mapData;    }    @Override    public View getView(int position, View convertView, ViewGroup parent) {        RouteInfo route = getItem(position);        LinearLayout view;        if (convertView == null) {            LayoutInflater inflater = LayoutInflater.from(context);            view = (LinearLayout)inflater.inflate(resource, null);        }        else {            view = (LinearLayout)convertView;            // Remove all children except TextView            view.removeViewsInLayout(1, view.getChildCount() - 1);        }        TextView textView = (TextView)view.findViewById(R.id.textView3);        int minutes = Math.round(route.getTime());        String time;        if (minutes <= 60) {            time = String.format("%d", minutes);        } else {            int hours = minutes / 60;            minutes %= 60;            time = String.format("%d:%02d", hours, minutes);        }        String text = String.format("%s", time);        textView.setText(text);        int[] lineColors = getRouteColors(route);        for (int lineColor : lineColors) {            LayoutInflater inflater = LayoutInflater.from(context);            ImageView imageView = (ImageView) inflater.inflate(R.layout.metro_line_icon, view, false);            imageView.setImageDrawable(new LineIcon(lineColor));            view.addView(imageView);        }        return view;    }    private void addRouteColor(StationsNum node, ArrayList<Integer> colorsList) {        Line line = mapData.map.getLine(node.trp, node.line);        if (line != null)            colorsList.add(line.parameters.Color);        else            colorsList.add(0x00000000); // Cannot get color from the loaded map    }    // Returns list of colors of lines as they are traversed in the route    private int[] getRouteColors(RouteInfo routes) {        // Find continuous sequences of nodes having the same color and save their colors to colorsList        ArrayList<Integer> colorsList = new ArrayList<>();        StationsNum prevNode = null;        for (StationsNum node: routes.getStations()) {            // Check if current line differs from previous one            if (prevNode != null && (prevNode.line != node.line || prevNode.trp != node.trp)) {                addRouteColor(prevNode, colorsList);            }            prevNode = node;        }        if (prevNode != null) {            addRouteColor(prevNode, colorsList);        }        // Convert ArrayList to array        int[] colors = new int[colorsList.size()];        for (int i = 0; i < colors.length; i++) {            colors[i] = colorsList.get(i);        }        return colors;    }    // todo: circle denotes icon of a station, but icon of a metro line is needed    class LineIcon extends Drawable {        private final Paint mPaint;        public LineIcon(int clr) {            mPaint = new Paint(Paint.ANTI_ALIAS_FLAG);            mPaint.setStyle(Paint.Style.FILL);            mPaint.setColor(0xff000000 | clr);        }        @Override        public void draw(Canvas canvas) {            Rect b = getBounds();            float x = b.width() /2;            float y = b.height() /2;            canvas.drawCircle(x, y, (x+y)*0.3f, mPaint);        }        @Override        public void setAlpha(int alpha) {}        @Override        public void setColorFilter(ColorFilter cf) {}        @Override        public int getOpacity() { return PixelFormat.TRANSLUCENT; }    }}